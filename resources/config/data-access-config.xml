<beans  xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="
           http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-3.1.xsd
           http://www.springframework.org/schema/tx 
           http://www.springframework.org/schema/tx/spring-tx-3.1.xsd">
           

  <!-- 
           *************************************************************************************************************************
           Con questa configurazione Spring utilizza il suo supporto per Hibernate per la connessione al db,
            e carica le classi nel classico modo. 
                      
           *************************************************************************************************************************
     -->        
     
  <!-- ========================= RESOURCE DEFINITIONS ========================= -->
  
    <context:property-placeholder location="classpath:jdbc.properties" />

  <!-- Configurer that replaces ${...} placeholders with values from a properties file -->
  <!-- (in this case, JDBC-related settings for the dataSource definition below) -->
  <!--  
  <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
    <property name="location">
      <value>/WEB-INF/jdbc.properties</value>
    </property>
  </bean>
  -->
                 

  <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
    <property name="driverClassName" value="${jdbc.driverClassName}" />
    <property name="url" value="${jdbc.url}" />
    <property name="username" value="${jdbc.username}" />
    <property name="password" value="${jdbc.password}" />
  </bean>
  
  <!--  JNDI DataSource that works in the container -->
  <!-- 
  <bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
        <property name="jndiName">
            <value>java:comp/env/jdbc/rental</value>
        </property>
    </bean>
    -->
  
  
  <!-- Session Factory da utilizzare per mapping attraverso JPA Annotations-->
  <bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
    <property name="dataSource" ref="dataSource" />
    <property name="annotatedClasses">
      <list>
        <value>com.progetto.domain.Nation</value>
        <value>com.progetto.domain.Position</value>
        <value>com.progetto.domain.Team</value>
        <value>com.progetto.domain.Player</value>
        <value>com.progetto.domain.Division</value>
        <value>com.progetto.domain.Career</value>
      </list>
    </property>
    <property name="hibernateProperties">
      <props>    
        <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
        <prop key="hibernate.show_sql">false</prop>  
        <prop key="hibernate.hbm2ddl.auto">update</prop>
        <prop key="hibernate.validator.autoregister_listeners">true</prop>
      </props>
    </property>
  </bean>
        
  <bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate">
    <property name="sessionFactory" ref="sessionFactory" />
  </bean>
   
  <!-- enable the configuration of transactional behavior based on annotations -->
  <tx:annotation-driven transaction-manager="transactionManager"/>   
  
  <!-- Transaction manager for a single Hibernate SessionFactory &#40;alternative to JTA&#41; -->
  <bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
    <property name="sessionFactory"><ref local="sessionFactory"/></property>
  </bean>  
  
  <!-- ========================= BUSINESS OBJECT DEFINITIONS ========================= -->
  
  <!--
    -
    - Defines specific transaction attributes with "readOnly" markers,
    - which is an optimization that is particularly valuable with Hibernate
    - &#40;to suppress unnecessary flush attempts for read-only operations&#41;.
    -
    - Note that in a real-life app with multiple transaction proxies,
    - we want to use parent and child bean definitions
    - as described in the manual and as shown below, to reduce duplication.
    -->
  
  <bean id="parentTransProxy" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean" abstract="true">
    <property name="transactionManager"><ref local="transactionManager"/></property>
    <property name="transactionAttributes">
      <props>
        <prop key="get*">PROPAGATION_REQUIRED,readOnly</prop>
        <prop key="find*">PROPAGATION_REQUIRED,readOnly</prop>
        <prop key="remove*">PROPAGATION_REQUIRED</prop>
        <prop key="save*">PROPAGATION_REQUIRED</prop>
      </props>
    </property>
  </bean>  
    
</beans>